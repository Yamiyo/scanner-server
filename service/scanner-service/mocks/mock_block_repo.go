// Code generated by MockGen. DO NOT EDIT.
// Source: blocks_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	po "portto-homework/internal/model/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBlocksRepo is a mock of BlocksRepo interface.
type MockBlocksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBlocksRepoMockRecorder
}

// MockBlocksRepoMockRecorder is the mock recorder for MockBlocksRepo.
type MockBlocksRepoMockRecorder struct {
	mock *MockBlocksRepo
}

// NewMockBlocksRepo creates a new mock instance.
func NewMockBlocksRepo(ctrl *gomock.Controller) *MockBlocksRepo {
	mock := &MockBlocksRepo{ctrl: ctrl}
	mock.recorder = &MockBlocksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlocksRepo) EXPECT() *MockBlocksRepoMockRecorder {
	return m.recorder
}

// CreateBlock mocks base method.
func (m *MockBlocksRepo) CreateBlock(ctx context.Context, db *gorm.DB, data *po.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlock", ctx, db, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlock indicates an expected call of CreateBlock.
func (mr *MockBlocksRepoMockRecorder) CreateBlock(ctx, db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlock", reflect.TypeOf((*MockBlocksRepo)(nil).CreateBlock), ctx, db, data)
}
