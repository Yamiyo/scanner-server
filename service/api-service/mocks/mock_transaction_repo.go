// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	po "portto-homework/internal/model/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTransactionsRepo is a mock of TransactionsRepo interface.
type MockTransactionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepoMockRecorder
}

// MockTransactionsRepoMockRecorder is the mock recorder for MockTransactionsRepo.
type MockTransactionsRepoMockRecorder struct {
	mock *MockTransactionsRepo
}

// NewMockTransactionsRepo creates a new mock instance.
func NewMockTransactionsRepo(ctrl *gomock.Controller) *MockTransactionsRepo {
	mock := &MockTransactionsRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsRepo) EXPECT() *MockTransactionsRepoMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionsRepo) GetTransaction(ctx context.Context, db *gorm.DB, txHash string) (*po.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, db, txHash)
	ret0, _ := ret[0].(*po.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionsRepoMockRecorder) GetTransaction(ctx, db, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).GetTransaction), ctx, db, txHash)
}

// GetTransactionLogs mocks base method.
func (m *MockTransactionsRepo) GetTransactionLogs(ctx context.Context, db *gorm.DB, txHash string) ([]*po.TransactionLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionLogs", ctx, db, txHash)
	ret0, _ := ret[0].([]*po.TransactionLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionLogs indicates an expected call of GetTransactionLogs.
func (mr *MockTransactionsRepoMockRecorder) GetTransactionLogs(ctx, db, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionLogs", reflect.TypeOf((*MockTransactionsRepo)(nil).GetTransactionLogs), ctx, db, txHash)
}

// GetTransactionsByBlockNum mocks base method.
func (m *MockTransactionsRepo) GetTransactionsByBlockNum(ctx context.Context, db *gorm.DB, blockNum uint64) ([]*po.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByBlockNum", ctx, db, blockNum)
	ret0, _ := ret[0].([]*po.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByBlockNum indicates an expected call of GetTransactionsByBlockNum.
func (mr *MockTransactionsRepoMockRecorder) GetTransactionsByBlockNum(ctx, db, blockNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByBlockNum", reflect.TypeOf((*MockTransactionsRepo)(nil).GetTransactionsByBlockNum), ctx, db, blockNum)
}
